import subprocess
import json
import logging
import os

# 로거 설정
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ExploitSearcher:
    """
    Searchsploit를 사용하여 공개된 익스플로잇을 검색하는 클래스
    """
    def search(self, query: str) -> dict:
        """
        주어진 검색어로 searchsploit을 실행하고 결과를 JSON으로 반환합니다.
        
        :param query: 검색할 소프트웨어/버전 등의 키워드
        :return: searchsploit 검색 결과 (JSON) 또는 오류 메시지
        """
        if not query:
            return {"error": "검색어가 제공되지 않았습니다."}

        try:
            # --json 플래그를 사용하여 결과를 JSON 형식으로 받음
            command = ["searchsploit", "--json", query]
            logger.info(f"Searchsploit 실행: {' '.join(command)}")

            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                check=True,
                encoding='utf-8'
            )

            # searchsploit은 결과가 없을 때 빈 stdout을 출력할 수 있음
            if not result.stdout.strip():
                logger.info(f"'{query}'에 대한 검색 결과가 없습니다.")
                return {"RESULTS_EXPLOIT": [], "SEARCH_TERM": query}

            parsed_json = json.loads(result.stdout)
            
            # 결과가 없는 경우도 처리
            if "RESULTS_EXPLOIT" not in parsed_json or not parsed_json["RESULTS_EXPLOIT"]:
                return {"RESULTS_EXPLOIT": [], "SEARCH_TERM": query}
                 
            logger.info(f"'{query}'에 대해 {len(parsed_json['RESULTS_EXPLOIT'])}개의 익스플로잇을 찾았습니다.")
            return parsed_json

        except FileNotFoundError:
            logger.error("searchsploit 명령어를 찾을 수 없습니다. Docker 컨테이너에 설치되어 있는지 확인하세요.")
            return {"error": "Searchsploit가 설치되어 있지 않습니다."}
        except subprocess.CalledProcessError as e:
            # searchsploit은 결과가 없을 때 non-zero exit code를 반환하기도 함
            # stderr에 특정 메시지가 포함된 경우, 이를 오류가 아닌 '결과 없음'으로 처리
            if e.stderr and "No Results" in e.stderr:
                logger.info(f"'{query}'에 대한 검색 결과가 없습니다 (stderr 확인).")
                return {"RESULTS_EXPLOIT": [], "SEARCH_TERM": query}
            
            logger.error(f"Searchsploit 실행 오류 (Exit Code: {e.returncode}): {e.stderr}")
            return {"error": f"Searchsploit 실행 중 오류 발생: {e.stderr}"}
        except json.JSONDecodeError:
            logger.error(f"Searchsploit 출력(JSON) 파싱 오류. 응답: {result.stdout[:200]}")
            return {"error": "Searchsploit 출력 결과를 파싱하는 데 실패했습니다."}
        except Exception as e:
            logger.error(f"Searchsploit 검색 중 알 수 없는 예외 발생: {str(e)}")
            return {"error": "알 수 없는 오류가 발생했습니다."}
            
    def get_exploit_file(self, file_path: str) -> dict:
        """
        searchsploit 결과에서 받은 파일 경로에 해당하는 익스플로잇 파일을 읽어옵니다.
        
        :param file_path: 파일 경로 (예: /root/exploitdb/exploits/linux/webapps/47138.py)
        :return: 파일 내용 또는 오류 메시지
        """
        if not file_path:
            logger.error("파일 경로가 제공되지 않았습니다.")
            return None, "파일 경로가 제공되지 않았습니다."
            
        try:
            # 경로 확인 및 보안 검사
            if ".." in file_path:
                logger.error(f"보안 위반 시도: {file_path}")
                return None, "잘못된 파일 경로 형식입니다."
                
            # searchsploit -p 명령을 사용하여 전체 경로 가져오기
            # 파일 경로가 이미 전체 경로인 경우 그대로 사용
            if file_path.startswith('/'):
                full_path = file_path
            else:
                # 상대 경로인 경우 전체 경로 구하기
                command = ["searchsploit", "-p", file_path]
                logger.info(f"전체 경로 검색: {' '.join(command)}")
                
                result = subprocess.run(
                    command,
                    capture_output=True,
                    text=True,
                    check=True,
                    encoding='utf-8'
                )
                
                # 출력에서 경로 추출
                for line in result.stdout.splitlines():
                    if line.strip().startswith("Path:"):
                        full_path = line.split("Path:")[1].strip()
                        break
                else:
                    logger.error(f"파일 경로를 찾을 수 없습니다: {file_path}")
                    return None, "파일을 찾을 수 없습니다."
            
            # 파일 존재 확인
            if not os.path.exists(full_path):
                logger.error(f"파일이 존재하지 않습니다: {full_path}")
                return None, "파일이 존재하지 않습니다."
                
            # 파일 읽기
            with open(full_path, 'rb') as f:
                file_content = f.read()
                
            # 파일 이름 추출
            file_name = os.path.basename(full_path)
            
            logger.info(f"파일 {file_name} 로드 완료: {len(file_content)} 바이트")
            return file_content, file_name
            
        except FileNotFoundError:
            logger.error(f"파일을 찾을 수 없습니다: {file_path}")
            return None, "파일을 찾을 수 없습니다."
        except subprocess.CalledProcessError as e:
            logger.error(f"searchsploit -p 실행 오류: {e.stderr}")
            return None, f"파일 경로 검색 중 오류 발생: {e.stderr}"
        except Exception as e:
            logger.error(f"파일 읽기 중 오류 발생: {str(e)}")
            return None, f"파일 읽기 중 오류 발생: {str(e)}" 