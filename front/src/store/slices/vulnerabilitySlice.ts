import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import apiService from '../../services/api';
import { ScanResult } from '../../types';

// 상태 타입 정의
interface VulnerabilityState {
  vulnerabilities: any[];
  currentVulnerability: any | null;
  loading: boolean;
  error: string | null;
}

// 초기 상태
const initialState: VulnerabilityState = {
  vulnerabilities: [],
  currentVulnerability: null,
  loading: false,
  error: null,
};

// 비동기 액션 생성
export const analyzeVulnerabilities = createAsyncThunk(
  'vulnerability/analyzeVulnerabilities',
  async (
    { scanId, scanResults }: { scanId?: string; scanResults?: ScanResult },
    { rejectWithValue }
  ) => {
    try {
      const response = await apiService.analyzeVulnerabilities(scanId, scanResults);
      if (response.status >= 400) {
        return rejectWithValue(response.data.error || '취약점 분석 중 오류가 발생했습니다.');
      }
      return response.data;
    } catch (error: any) {
      return rejectWithValue(error.message || '취약점 분석 중 오류가 발생했습니다.');
    }
  }
);

// 슬라이스 생성
const vulnerabilitySlice = createSlice({
  name: 'vulnerability',
  initialState,
  reducers: {
    clearError: (state) => {
      state.error = null;
    },
    setCurrentVulnerability: (state, action: PayloadAction<any>) => {
      state.currentVulnerability = action.payload;
    },
    clearVulnerabilityResults: (state) => {
      state.currentVulnerability = null;
      state.vulnerabilities = [];
    },
  },
  extraReducers: (builder) => {
    // 비동기 액션에 대한 처리 추가
    builder
      .addCase(analyzeVulnerabilities.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(analyzeVulnerabilities.fulfilled, (state, action: PayloadAction<any>) => {
        state.loading = false;
        state.currentVulnerability = action.payload;
      })
      .addCase(analyzeVulnerabilities.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      });
  },
});

export const { clearError, setCurrentVulnerability, clearVulnerabilityResults } = vulnerabilitySlice.actions;
export default vulnerabilitySlice.reducer; 